import pandas as pd

metadata_file = config["input_meta"]
metadata = pd.read_csv(metadata_file, sep="\t").set_index(["batch","sample"])
nparallel = config['nparallel'] if 'nparallel' in config else 40
tmpdir=config['tmpdir']


batch_ids, sample_names = list(zip(*metadata.index))
batch_ids = set(batch_ids)
sample_names = set(sample_names)
print("batch_ids", batch_ids)
print("sample_names", sample_names)

SPLIT_OUT="split-out"
SPLITS = [str(x+1) for x in range(nparallel)]

REF= config['ref']
CODEC_root = config['codec_root']

DEMUX=f"{CODEC_root}/build/codec demux"
TRIM=f"{CODEC_root}/build/codec trim"
CALL_BIN=f"{CODEC_root}/build/codec call"
AGG_METRICS_SCRIPT=f"{CODEC_root}/snakemake/script/cds_summarize.py"
AGG_LOG_SCRIPT=f"{CODEC_root}/snakemake/script/agg_log.py"
SPLIT_SCRIPT=f"{CODEC_root}/snakemake/script/fastqsplit.pl"

JAVA_PARAMS = "-Xmx30g -Djava.io.tmpdir=/tmp"
BWA = config['bwa']
PICARD = f"java {JAVA_PARAMS} -jar $PICARD"
GATK = f"{config['gatk4']} --java-options \"{JAVA_PARAMS}\""
GATK3 = f"{config['gatk3']} --java-options \"{JAVA_PARAMS}\""
FGBIO = f"java {JAVA_PARAMS} -jar {config['fgbio']}"

PROJECT= config["project"]
DETECT_DIR="detect"
ACCU_OUT="sfc"
ADAPTER_TRIM_OUT="adap_trimmed"
TRIM_MAPPED="mapped"
Metrics_OUT="metrics"
workdir: config["cwd"]

batch_to_fastq = metadata.reset_index().groupby('batch').agg({'fastq1' : set, 'fastq2': set})
batch_to_samplesheet = metadata.reset_index().groupby('batch').agg({'sample_sheet' : set})
batch_to_samples = metadata.reset_index().groupby('batch').agg({'sample' : set})
sample_to_batch = metadata.reset_index().groupby('sample').agg({'batch' : set})
#sample_to_germvcf = metadata.reset_index().groupby('sample').agg({'germline_vcf' : set})
sample_to_germbam = metadata.reset_index().groupby('sample').agg({'germline_bam' : set})
rule SplitFastq1:
    input:
         lambda wildcards: batch_to_fastq.loc[wildcards.id]['fastq1']
    params:
          nsplit = nparallel,
          prefix = expand("/broad/hptmp/ruolin/{prjdir}/{{id}}_split_r1", prjdir=PROJECT)
    output:
          split = temp(expand("/broad/hptmp/ruolin/{prjdir}/{{id}}_split_r1.{ss}.fastq", ss = SPLITS, prjdir=PROJECT))
    resources:
        mem = 8,
        runtime = 24
    shell:
        """
        zcat {input} | {SPLIT_SCRIPT} {params.prefix} {params.nsplit}
        """

rule SplitFastq2:
    input:
         lambda wildcards: batch_to_fastq.loc[wildcards.id]['fastq2']
    params:
          nsplit = nparallel,
          prefix = expand("/broad/hptmp/ruolin/{prjdir}/{{id}}_split_r2", prjdir=PROJECT)
    output:
          split = temp(expand("/broad/hptmp/ruolin/{prjdir}/{{id}}_split_r2.{ss}.fastq", ss = SPLITS, prjdir=PROJECT))
    resources:
        mem = 8,
        runtime = 24
    shell:
         """
         zcat {input} | {SPLIT_SCRIPT} {params.prefix} {params.nsplit}
         """

for batch in batch_ids:
    rule:
        name: f"Demux_{batch}"
        input:
          read1 = f"/broad/hptmp/ruolin/{PROJECT}/{batch}_split_r1.{{ss}}.fastq",
          read2 = f"/broad/hptmp/ruolin/{PROJECT}/{batch}_split_r2.{{ss}}.fastq",
          sample_sheet = batch_to_samplesheet.loc[batch]['sample_sheet']
        output:
          read1 = temp(expand("demux/%s_split.{{ss}}.{index}.1.fastq.gz" % batch, index = batch_to_samples.loc[batch]['sample'])),
          read2 = temp(expand("demux/%s_split.{{ss}}.{index}.2.fastq.gz" % batch,  index = batch_to_samples.loc[batch]['sample'])),
        resources:
         mem = 8,
         runtime = 24
        wildcard_constraints:
           ss = "[0-9]+"
        params:
         outprefix = f"demux/{batch}_split.{{ss}}",
         log = f"demux/{batch}_split.{{ss}}.log",
         ref = {REF}
        shell:
         """
             {DEMUX} -1 {input.read1} -2 {input.read2} -p {input.sample_sheet} -o {params.outprefix} > {params.log}
         """

# rule MergeSplitFastq1:
#     input:
#         f1 = expand("demux/{{batch_id}}_split.{ss}.{{index}}.1.fastq.gz", ss=SPLITS),
#     output:
#         f1 = "fastq/{batch_id}.{index}.1.fastq.gz",
#     resources:
#         mem = 4,
#         runtime = 72,
#         ncores = 1
#     shell:
#         """
#         cat {input.f1} > {output.f1}
#         """
#
# rule MergeSplitFastq2:
#     input:
#         f2 = expand("demux/{{batch_id}}_split.{ss}.{{index}}.2.fastq.gz", ss=SPLITS)
#     output:
#         f2 = "fastq/{batch_id}.{index}.2.fastq.gz"
#     resources:
#         mem = 8,
#         runtime = 72,
#         ncores = 1
#     shell:
#         """
#         cat {input.f2} > {output.f2}
#         """

rule Trim:
    input:
        read1 = "demux/{batch_id}_split.{ss}.{index}.1.fastq.gz",
        read2 = "demux/{batch_id}_split.{ss}.{index}.2.fastq.gz",
    output:
        trim = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.trim.bam"),
        log = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.trim.log"),
    params:
        adap_type = "custom_primer_v2",
        outprefix = "adap_trimmed/{batch_id}_split.{ss}.{index}",
        rgsm = "{index}"
    resources:
        mem = 8,
        runtime = 24
    wildcard_constraints:
        index = "[0-9a-zA-Z_-]+",
        ss = "[0-9]+"
    shell:
        """
            {TRIM} -1 {input.read1} -2 {input.read2} -o {params.outprefix} -u 3 -U 3 -f 2 -t 2 -s {params.rgsm} > {output.log}
        """

rule MergeLogSplit:
    input:
        expand(ADAPTER_TRIM_OUT + "/{{batch_id}}_split.{ss}.{{index}}.trim.log", ss=SPLITS),
    output:
        ADAPTER_TRIM_OUT + "/{batch_id}.{index}.trim.log"
    wildcard_constraints:
        batch_id = "[0-9a-zA-Z_-]+",
        index = "[0-9a-zA-Z_-]+"
    resources:
        mem = 8,
        tuntime = 24,
        ncores = 1
    shell:
        """
         {AGG_LOG_SCRIPT} {input} {output}
        """

rule MethylAlign:
    input:
        bam = "adap_trimmed/{batch_id}_split.{ss}.{index}.trim.bam"
    output:
        pairbam = "tmp/{batch_id}_split.{ss}.{index}.paired_reads.bam",
    params:
        outprefix = "tmp/{batch_id}_split.{ss}.{index}"
    resources:
        mem = 8,
        runtime = 72,
        ncores = config['ncores']
    shell:
        """
        {CODEC_root}/cmake-build-debug/codec ms-align -b {input.bam} -o {params.outprefix} -r {REF} -q 30 -d 12
        """

rule MergeSplit:
    input:
          expand("tmp/{{batch_id}}_split.{ss}.{{index}}.paired_reads.bam", ss=SPLITS),
    output:
          merged=temp(expand("tmp/{{batch_id}}.{{index}}.paired_reads.merged.bam")),
          sorted=temp(expand("tmp/{{batch_id}}.{{index}}.paired_reads.sorted.bam"))
    resources:
          mem = 8,
          runtime = 72,
          ncores = config['ncores']
    shell:
         """
         samtools merge -@ {resources.ncores} {output.merged} {input} && samtools sort -@ {resources.ncores} {output.merged} -o {output.sorted}
         """

rule MergeRawGroup:
    input:
         lambda wildcard: expand("tmp/{batch_id}.{{index}}.paired_reads.sorted.bam", batch_id = sample_to_batch.loc[wildcard.index]['batch'])
    output:
          bam = temp(expand("tmp/{{index}}.paired_reads.sorted.bam"))
    resources:
             mem = 8,
             ncores = 1,
             runtime = 72,
    wildcard_constraints:
        index = "[0-9a-zA-Z_-]+",
    run:
        if len(input) == 1:
            shell("cp {input} {output.bam}")
        else:
            shell("samtools merge -@ {resources.ncores} {output.bam} {input}")

# rule ReplaceRawReadGroup:
#     input:
#        "tmp/{index}.raw.aligned.bam"
#     output:
#        bam = temp("tmp/{index}.raw.replacerg.bam"),
#        bai = temp("tmp/{index}.raw.replacerg.bai"),
#     params:
#         sid = "{index}"
#     resources:
#         mem = 8,
#         runtime = 32,
#     shell:
#         """
#         {PICARD} AddOrReplaceReadGroups \
#            I={input} \
#            O={output.bam} \
#            CREATE_INDEX=true \
#            RGID=4 \
#            RGLB=lib1 \
#            RGPL=ILLUMINA \
#            RGPU=unit1 \
#            RGSM={params.sid}
#         """

rule MarkPairedDuplicates:
    input:
        bam="tmp/{index}.paired_reads.sorted.bam"
    resources:
        mem = 32,
        runtime = 48,
    output:
        bam = "ms-aligned-bam/{index}.paired_reads.markdup.bam",
        met = "metrics/{index}.paired_reads.marked_duplicates.txt",
    shell:
        """
        {PICARD} MarkDuplicates I={input.bam} O={output.bam} M={output.met} CREATE_INDEX=true TAG_DUPLICATE_SET_MEMBERS=true TAGGING_POLICY=All
        """

rule OutputConvertedStrand:
    input:
        bam = "ms-aligned-bam/{index}.paired_reads.markdup.bam",
    resources:
        mem = 4,
        runtime = 48,
    output:
        bam = "ms-aligned-bam/{index}.converted_strand.duplicate_removed.bam",
    shell:
        """
        /xchip/bloodbiopsy/ruolin/link_duplex/ms-codec/get_methreads.py {input.bam} {output.bam}
        """

rule CollectInsertSizeMetrics:
    input:
        bam = "ms-aligned-bam/{index}.paired_reads.markdup.bam",
    output:
          txt = Metrics_OUT + "/{index}.raw.insert_size_metrics.txt",
          hist = Metrics_OUT + "/{index}.raw.insert_size_histogram.pdf"
    shell:
         """
         {PICARD} CollectInsertSizeMetrics I={input.bam} O={output.txt} H={output.hist} M=0.5 W=600 DEVIATIONS=100
         """
rule BismarkExtractMethylation:
    input:
        "ms-aligned-bam/{index}.converted_strand.duplicate_removed.bam",
    output:
        "bismark/{index}.converted_strand.duplicate_removed.CpG_report.txt.gz",
        temp("bismark/{index}.converted_strand.duplicate_removed.bedGraph.gz.bismark.zero.cov")
    resources:
        mem = 8,
        runtime = 96,
    shell:
        """
        bismark_methylation_extractor -s --cytosine_report --genome_folder /xchip/bloodbiopsy/ruolin/database/genome/human/hg38/  \
            --bedGraph --gzip {input} -o bismark --zero_based --comprehensive
        """

rule BismarkMethylationBedGraphMerge:
    input:
        "bismark/{index}.converted_strand.duplicate_removed.bedGraph.gz.bismark.zero.cov"
    output:
        "bismark/{index}.converted_strand.duplicate_removed.bedGraph.gz.bismark.zero.nodecoy.strand_merge.cov"
    resources:
        mem = 4,
        runtime = 24,
    shell:
        """
        awk 'length($1) <= 5 && $1 != "chrM" {{print $0}}' {input} | /xchip/bloodbiopsy/ruolin/apps/bedtools2/bedtools merge -c 5,6 -o sum,sum > {output}
        """


# rule CpGIslandSummary:
#     input:
#         "bismark/{index}.converted_strand.duplicate_removed.bedGraph.gz.bismark.zero.cov"
#     output:
#         "bismark/{index}.converted_strand.duplicate_removed.bedGraph.gz.bismark.zero.nodocy.cov"


rule CDSByProduct:
    input:
        trim_log = ADAPTER_TRIM_OUT + "/{batch_id}.{index}.trim.log",
        highconf_bam = "tmp/{batch_id}.{index}.raw.aligned.sortbyname.bam",
    output:
        met = Metrics_OUT + "/byproduct/{batch_id}.{index}.byproduct.txt"
    params:
        sid = "{index}"
    wildcard_constraints:
        index = "[0-9a-zA-Z_-]+"
    resources:
        mem = 24,
        runtime = 24,
    shell:
        """
           {AGG_METRICS_SCRIPT} --sample_id {params.sid} --trim_log {input.trim_log} \
           --highconf_bam {input.highconf_bam} > {output.met}
        """
